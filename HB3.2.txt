#!/usr/bin/env python
import RPi.GPIO as GPIO
import time

# 超声波传感器引脚定义 (BCM 模式)
GPIO_TRIGGER = 23
GPIO_ECHO = 24

# 蜂鸣器引脚定义 (BCM 模式)
Buzzer = 17  # GPIO 17 对应物理引脚 11

# LED引脚定义 (BCM 模式)
pins = {'pin_R': 13, 'pin_G': 18, 'pin_B': 19}

# 设置 GPIO 模式为 BCM
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

# 初始化蜂鸣器引脚并设置为高电平（关闭状态）
def setup_buzzer(pin):
    global BuzzerPin
    BuzzerPin = pin
    GPIO.setup(BuzzerPin, GPIO.OUT)
    GPIO.output(BuzzerPin, GPIO.HIGH)

def on_buzzer():
    GPIO.output(BuzzerPin, GPIO.LOW)

def off_buzzer():
    GPIO.output(BuzzerPin, GPIO.HIGH)

def beep(x):
    on_buzzer()
    time.sleep(x)
    off_buzzer()
    time.sleep(x)

# 初始化超声波传感器引脚
def setup_ultrasonic():
    GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
    GPIO.setup(GPIO_ECHO, GPIO.IN)

def distance():
    GPIO.output(GPIO_TRIGGER, True)
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER, False)

    start_time = time.time()
    stop_time = time.time()

    while GPIO.input(GPIO_ECHO) == 0:
        start_time = time.time()

    while GPIO.input(GPIO_ECHO) == 1:
        stop_time = time.time()

    time_elapsed = stop_time - start_time
    distance = (time_elapsed * 34300) / 2

    return distance

# 初始化LED引脚并设置为高电平（关闭状态）
def setup_led():
    for pin in pins.values():
        GPIO.setup(pin, GPIO.OUT)
        GPIO.output(pin, GPIO.HIGH)

    global p_R, p_G, p_B
    p_R = GPIO.PWM(pins['pin_R'], 2000)
    p_G = GPIO.PWM(pins['pin_G'], 2000)
    p_B = GPIO.PWM(pins['pin_B'], 2000)
    p_R.start(0)
    p_G.start(0)
    p_B.start(0)

def map(x, in_min, in_max, out_min, out_max):
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

def gradient(start_col, end_col, duration=1):
    step = 50
    sleep_time = duration / step

    start_R = (start_col & 0xFF0000) >> 16
    start_G = (start_col & 0x00FF00) >> 8
    start_B = (start_col & 0x0000FF)

    end_R = (end_col & 0xFF0000) >> 16
    end_G = (end_col & 0x00FF00) >> 8
    end_B = (end_col & 0x0000FF)

    for i in range(step + 1):
        R_val = int(start_R + (end_R - start_R) * i / step)
        G_val = int(start_G + (end_G - start_G) * i / step)
        B_val = int(start_B + (end_B - start_B) * i / step)

        p_R.ChangeDutyCycle(map(R_val, 0, 255, 0, 100))
        p_G.ChangeDutyCycle(map(G_val, 0, 255, 0, 100))
        p_B.ChangeDutyCycle(map(B_val, 0, 255, 0, 100))
        time.sleep(sleep_time)

def led_loop():
    colors = [0xFF0000, 0x00FF00, 0x0000FF, 0xFF00FF, 0x00FFFF, 0xFFFF00]
    end_time = time.time() + 5  # 运行5秒
    while time.time() < end_time:
        for i in range(len(colors)-1):
            gradient(colors[i], colors[i+1])
        gradient(colors[-1], colors[0])

def distance_loop():
    while True:
        dist = distance()
        print("Measured Distance = {:.2f} cm".format(dist))

        if dist < 10:
            beep(0.1)
            p_R.start(100)
            p_G.stop()
            p_B.stop()

        elif 10 <= dist <= 50:
            p_B.start(100)
            p_R.stop()
            p_G.stop()

        elif dist > 50:
            p_G.start(100)
            p_R.stop()
            p_B.stop()

        time.sleep(0.5)  # 延迟 0.5 秒

def destroy():
    off_buzzer()
    p_R.stop()
    p_G.stop()
    p_B.stop()
    for pin in pins.values():
        GPIO.output(pin, GPIO.HIGH)
    GPIO.cleanup()

if __name__ == '__main__':
    print("Welcome to ultrasonic world")
    setup_buzzer(Buzzer)
    setup_ultrasonic()
    setup_led()
    try:
        led_loop()
        distance_loop()
    except KeyboardInterrupt:
        print("\nStopped by user")
        time.sleep(2)
        destroy()
